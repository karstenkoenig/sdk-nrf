.. _ug_nrf54h20_logging:

nRF54H20 logging using System Trace Module (STM)
################################################

.. contents::
   :local:
   :depth: 2

nRF54H20 domains contain System Trace Module (STM) hardware devices to multiplex the logs generated by the domains in the system.
The STM multiplexes the logs as traces protocol data and synchronizes them on a single output, such as UART.
This approach has a minimal cost on performance and code size.

The STM implements a frontend of the Zephyr logging subsystem, allowing you to use the standard Zephyr logging API.

Implementation
**************

The current implementation works as follows:

1. All domains write the raw encoded log data to their own STM peripheral called the STM Extended Stimulus Port (STMESP).
#. The STMESP generates a data stream based on the register writes.
#. The STM multiplexes the data stream with streams from other domains, and it places them in a single memory buffer.
#. The Secure Domain Firmware (SDFW) reads the buffer and decodes the raw encoded log data.
#. The SDFW outputs the logging data in a human-readable format over UART.

Configuration
*************

The STM is enabled in the default configuration of the SDFW.
To show the logs for a given domain in the UART output, you must enable the STM for that domain.

To enable the STM for a domain, set the :kconfig:option:`CONFIG_LOG_STM` Kconfig option for that domain's image to ``y``.

Reading the logs
****************

To read the STM log output on the UART, consult the following documentation pages:

* If you want to use the *nRF Serial Terminal* from the |nRFVSC|, see the `nRF Terminal documentation`_ on the `nRF Connect for Visual Studio Code`_ documentation site.
* if you want to use PuTTY, see :ref:`putty`.

.. note::
   To use UART in your application, the UART's node must be described in devicetree.
   For more details, see :ref:`zephyr:devicetree-intro`.

The following is an example log output::

   [00:00:00.154,790] <inf> app/spsc_pbuf: alloc in 0x2f0df800
   [00:00:00.163,319] <inf> app/spsc_pbuf: alloc 0x2f0df800 wr_idx:20
   [00:00:00.181,112] <inf> app/spsc_pbuf: commit in 0x2f0df800
   [00:00:00.189,090] <inf> app/spsc_pbuf: commit 0x2f0df800, len:20 wr_idx: 44
   [00:00:00.202,577] <inf> rad/icmsg: mbox_callback
   [00:00:00.214,750] <inf> rad/spsc_pbuf: claim 0x2f0df800 rd_idx:20
   [00:00:00.235,823] <inf> rad/spsc_pbuf: free 0x2f0df800 len:20 rd_idx: 44
   [00:00:00.244,507] <inf> rad/spsc_pbuf: read done 0x2f0df800 len:20
   [00:00:00.272,444] <inf> rad/host: ep recv 0x330021f0, len:20
   [00:00:00.283,939] <inf> rad/host: rx:00 exp:00
   [00:00:00.292,200] <inf> rad/icmsg: read 0
   [00:00:05.077,026] <inf> rad/spsc_pbuf: alloc in 0x2f0df000
   [00:00:05.077,068] <inf> rad/spsc_pbuf: alloc 0x2f0df000 wr_idx:44
   [00:00:05.077,098] <inf> rad/spsc_pbuf: commit in 0x2f0df000
   [00:00:05.077,134] <inf> rad/spsc_pbuf: commit 0x2f0df000, len:20 wr_idx

Each log line contains a domain-related or core-related prefix between the log level and the module name, indicating the core that generated the log entry.
The following are the prefixes used to indicate the cores:

* ``app`` - Application core
* ``sys`` - System Controller (SysCtrl)
* ``sec`` - Secure Domain
* ``rad`` - Radio core
* ``ppr`` - Peripheral Processor (PPR)
* ``flpr`` - Fast Lightweight Processor (FLPR)
