#
# Copyright (c) 2018 Nordic Semiconductor
#
# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
#

menuconfig DESKTOP_USB_ENABLE
	bool "Enable USB module"
	select USB_DEVICE_STACK
	select USB_DEVICE_HID
	help
	  Enables USB module. The module allows to transfer HID reports over
	  USB.

if DESKTOP_USB_ENABLE

config DESKTOP_USB_REMOTE_WAKEUP
	bool "Enable USB remote wakeup"
	default y
	select USB_DEVICE_REMOTE_WAKEUP
	depends on CAF_PM_EVENTS
	help
	  Enable USB remote wakeup functionality. The USB wakeup request is
	  triggered on wake_up_event.

config DESKTOP_USB_SELECTIVE_REPORT_SUBSCRIPTION
	bool "Subscribe only for predefined subset of HID reports"
	depends on DESKTOP_HID_STATE_ENABLE
	help
	  By default, every USB HID instance subscribes for all the HID reports.
	  Enable this option to specify a subset of HID reports for every USB
	  HID instance. The subset of HID reports must be specified in
	  usb_state_def.h file in application configuration directory for given
	  board and configuration.

config DESKTOP_USB_PM_ENABLE
	bool "Enable USB power manager integration"
	depends on CAF_PM_EVENTS
	select CAF_FORCE_POWER_DOWN_EVENTS
	default y
	help
	  This enables small module that blocks power down if the USB is active.

config DESKTOP_USB_STATE_INIT_STATE_WORKAROUND
	bool
	default y if SOC_SERIES_NRF54HX
	help
	  For some USB controllers, the USB_DC_SUSPEND event may be received
	  before the USB_DC_CONNECTED event. Setting initial state of the USB
	  state module to USB_STATE_POWERED prevents assertion failure during
	  application boot.
	  The workaround is needed for the nRF54HX SoC use-case.

config DESKTOP_USB_STATE_INIT_THREAD
	bool
	default y if SOC_SERIES_NRF54HX
	help
	  Initialize USB stack in a separate thread instead of doing it in
	  the context of the system workqueue.
	  For the nRF54HX SoC use-case, the usb_init() function blocks while
	  waiting for a synchronization object that is received after the system
	  controller sends the USB service event through the NRFS and IPC with
	  the ICMSG backend to the application core.
	  The ICMSG backend uses the system workqueue context for both
	  initialization and on the incoming message handling, so calling the
	  usb_init() function from the same context causes deadlock during
	  application boot.

config DESKTOP_USB_STATE_INIT_THREAD_STACK_SIZE
	int
	default 2048

config DESKTOP_USB_STATE_INIT_THREAD_PRIORITY
	int
	default 0

config DESKTOP_USB_STATE_INIT_THREAD_DELAY_MS
	int
	default 0

config USB_HID_POLL_INTERVAL_MS
	default 1
	help
	  Use small USB HID Device polling interval to ensure low latency.

config USB_HID_DEVICE_COUNT
	default DESKTOP_HID_DONGLE_BOND_COUNT if DESKTOP_ROLE_HID_DONGLE
	default 1 if DESKTOP_ROLE_HID_PERIPHERAL
	help
	  By default, dongle uses a dedicated USB HID instance to forward data
	  from given peripheral to the host. On memory-limited dongles, a
	  single USB HID instance can be used to forward HID reports from all
	  of the connected peripherals.

	  By default, peripheral uses a single USB HID instance to send all of
	  the HID reports.

config USB_HID_BOOT_PROTOCOL
	default y if DESKTOP_HID_BOOT_INTERFACE_MOUSE
	default y if DESKTOP_HID_BOOT_INTERFACE_KEYBOARD

config USB_HID_PROTOCOL_CODE
	default 2 if DESKTOP_HID_BOOT_INTERFACE_MOUSE
	default 1 if DESKTOP_HID_BOOT_INTERFACE_KEYBOARD

config USB_DEVICE_MANUFACTURER
	default DESKTOP_DEVICE_MANUFACTURER
	help
	  nRF Desktop defines common HID device identification values
	  and passes them as defaults to the USB subsystem configuration.

config USB_DEVICE_PRODUCT
	default DESKTOP_DEVICE_PRODUCT
	help
	  nRF Desktop defines common HID device identification values
	  and passes them as defaults to the USB subsystem configuration.

config USB_DEVICE_VID
	default DESKTOP_DEVICE_VID
	help
	  nRF Desktop defines common HID device identification values
	  and passes them as defaults to the USB subsystem configuration.

config USB_DEVICE_PID
	default DESKTOP_DEVICE_PID
	help
	  nRF Desktop defines common HID device identification values
	  and passes them as defaults to the USB subsystem configuration.

choice USB_DEVICE_LOG_LEVEL_CHOICE
	default USB_DEVICE_LOG_LEVEL_OFF
	help
	  Disable USB device logs to avoid flooding logs.
endchoice

choice USB_DRIVER_LOG_LEVEL_CHOICE
	default USB_DRIVER_LOG_LEVEL_OFF
	help
	  Disable USB driver logs to avoid flooding logs.
endchoice

module = DESKTOP_USB_STATE
module-str = USB state
source "subsys/logging/Kconfig.template.log_config"

endif # DESKTOP_USB_ENABLE
