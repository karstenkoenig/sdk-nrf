//
// Copyright (c) 2022 Nordic Semiconductor ASA. All Rights Reserved.
//
// The information contained herein is confidential property of Nordic Semiconductor ASA.
// The use, copying, transfer or disclosure of such information is prohibited except by
// express written agreement with Nordic Semiconductor ASA.
//

@Library("CI_LIB") _

HashMap CI_STATE = lib_State.getConfig(JOB_NAME)
properties(lib_State.getTriggers())
def pipeline_utils


pipeline
{
    parameters {
        string(name: 'jsonstr_CI_STATE', description: 'Default State if no upstream job', defaultValue: CI_STATE.CFG.INPUT_STATE_STR)
        choice(name: 'TEST_CYCLE', description: 'Test cycle to run', choices: CI_STATE.CFG.CRON_CHOICES)
    }
    agent {
        docker {
            label "linux&&docker&&build-ncs"
            image "docker-dtr.nordicsemi.no/buran_ci/ncs-int:5761cae"
            args lib_Global.getDefaultDockerRunArgs()
        }
    }
    options {
        timeout(time: CI_STATE.CFG.TIMEOUT.time, unit: 'HOURS')
		checkoutToSubdirectory("ncs/nrf")
    }

    environment {
        ZEPHYR_TOOLCHAIN_VARIANT = "zephyr"
		
    }

    stages {
        stage('Checkout') { 
            steps { 
                script {
					dir("${WORKSPACE}") {
						env.DOXYGEN_VERSION = sh (script: "cat ./ncs/nrf/scripts/tools-versions-linux.txt | grep 'doxygen' | sed 's/^.*=//'", returnStdout: true).trim()
						sh("wget --no-verbose https://downloads.sourceforge.net/project/doxygen/rel-${env.DOXYGEN_VERSION}/doxygen-${env.DOXYGEN_VERSION}.linux.bin.tar.gz")
						sh("tar xf doxygen-${env.DOXYGEN_VERSION}.linux.bin.tar.gz")
						env.DOXYGEN_PATH = "${WORKSPACE}/doxygen-${env.DOXYGEN_VERSION}/bin" 
					}
                }
            }
        } 
		stage('west init') { 
            steps { 
                script {
						dir("${WORKSPACE}/ncs") {
							lib_West.InitUpdate('nrf')	
							sh("west zephyr-export")
						} 
					}
				}
            } 
		stage('Install documentation dependencies') { 
            steps { 
                script {
						dir("${WORKSPACE}/ncs") {
							//sudo apt-get install -y ninja-build mscgen plantuml libclang1-9 libclang-cpp9
							sh("pip3 install -r nrf/scripts/requirements-base.txt")
							sh("pip3 install -r zephyr/scripts/requirements-doc.txt")
							sh("pip3 install -r nrf/scripts/requirements-doc.txt")
						} 
					}
				}
            } 
		stage('Build documentation') { 
            steps { 
                script {
						dir("${WORKSPACE}/ncs/nrf") {
							sh('''
								export PATH=$DOXYGEN_PATH:\$PATH
								cmake -GNinja -Bdoc/_build -Sdoc -DSPHINXOPTS_EXTRA='-W'
								ninja -C doc/_build
								tar cfJ html-output.tar.xz --directory=doc/_build html
								''')
						} 
					}
				}
            } 
		stage('Deploy documentation') { 
			when { branch 'haltium-ncs' }
            steps { 
                script {
						dir("${WORKSPACE}/ncs/nrf") {
								sshagent(credentials: ['buran_ci_ssh']) {
									sh 'scp -o StrictHostKeyChecking=no html-output.tar.xz ncs-doc@int-ncs-doc:/var/www/html/'
									sh 'ssh -o StrictHostKeyChecking=no ncs-doc@int-ncs-doc "tar -xf /var/www/html/html-output.tar.xz -C /var/www/html/haltium-ncs && rm /var/www/html/html-output.tar.xz"'
								}
						} 
					}
				}
            } 
    } //stages
    post {
        always {
            node ('linux') {
                cleanWs disableDeferredWipeout: true, deleteDirs: true
            }
        }
    } //post
} //pipeline
